import java.util.Stack;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 초기 문자열 입력
        String initialText = br.readLine().trim();

        // 명령어 개수 입력
        int numCommands = Integer.parseInt(br.readLine().trim());

        // 명령어 입력
        String[] commands = new String[numCommands];
        for (int i = 0; i < numCommands; i++) {
            commands[i] = br.readLine().trim();
        }

        // 결과 출력
        System.out.println(getFinalString(initialText, commands));
    }

    public static String getFinalString(String initialText, String[] commands) {
        Stack<Character> leftStack = new Stack<>();
        Stack<Character> rightStack = new Stack<>();

        // 초기 문자열을 왼쪽 스택에 넣기
        for (char c : initialText.toCharArray()) {
            leftStack.push(c);
        }

        // 명령어 수행
        for (String command : commands) {
            char op = command.charAt(0);
            switch (op) {
                case 'L':
                    if (!leftStack.isEmpty()) {
                        rightStack.push(leftStack.pop());
                    }
                    break;
                case 'D':
                    if (!rightStack.isEmpty()) {
                        leftStack.push(rightStack.pop());
                    }
                    break;
                case 'B':
                    if (!leftStack.isEmpty()) {
                        leftStack.pop();
                    }
                    break;
                case 'P':
                    char newChar = command.charAt(2);
                    leftStack.push(newChar);
                    break;
            }
        }

        // 왼쪽 스택에 있는 문자열을 오른쪽 스택으로 이동시키기
        while (!leftStack.isEmpty()) {
            rightStack.push(leftStack.pop());
        }

        // 오른쪽 스택의 문자열을 문자열로 변환하여 반환
        StringBuilder finalString = new StringBuilder();
        while (!rightStack.isEmpty()) {
            finalString.append(rightStack.pop());
        }
        return finalString.toString();
    }
}
